//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC_Challenge
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class nologodbEntities : DbContext
    {
        public nologodbEntities()
            : base("name=nologodbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Post> Posts { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
    
        public virtual int Delete_Post(Nullable<long> postID)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("PostID", postID) :
                new ObjectParameter("PostID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Delete_Post", postIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Insert_Post(string postTitle, Nullable<System.DateTime> postDate, string postAuthor, string postBody, string postImage)
        {
            var postTitleParameter = postTitle != null ?
                new ObjectParameter("PostTitle", postTitle) :
                new ObjectParameter("PostTitle", typeof(string));
    
            var postDateParameter = postDate.HasValue ?
                new ObjectParameter("PostDate", postDate) :
                new ObjectParameter("PostDate", typeof(System.DateTime));
    
            var postAuthorParameter = postAuthor != null ?
                new ObjectParameter("PostAuthor", postAuthor) :
                new ObjectParameter("PostAuthor", typeof(string));
    
            var postBodyParameter = postBody != null ?
                new ObjectParameter("PostBody", postBody) :
                new ObjectParameter("PostBody", typeof(string));
    
            var postImageParameter = postImage != null ?
                new ObjectParameter("PostImage", postImage) :
                new ObjectParameter("PostImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Insert_Post", postTitleParameter, postDateParameter, postAuthorParameter, postBodyParameter, postImageParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Insert_User(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Insert_User", userNameParameter, passwordParameter);
        }
    
        public virtual int Update_Post(Nullable<long> postID, string postTitle, string postDate, string postAuthor, string postBody, string postImage)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("PostID", postID) :
                new ObjectParameter("PostID", typeof(long));
    
            var postTitleParameter = postTitle != null ?
                new ObjectParameter("PostTitle", postTitle) :
                new ObjectParameter("PostTitle", typeof(string));
    
            var postDateParameter = postDate != null ?
                new ObjectParameter("PostDate", postDate) :
                new ObjectParameter("PostDate", typeof(string));
    
            var postAuthorParameter = postAuthor != null ?
                new ObjectParameter("PostAuthor", postAuthor) :
                new ObjectParameter("PostAuthor", typeof(string));
    
            var postBodyParameter = postBody != null ?
                new ObjectParameter("PostBody", postBody) :
                new ObjectParameter("PostBody", typeof(string));
    
            var postImageParameter = postImage != null ?
                new ObjectParameter("PostImage", postImage) :
                new ObjectParameter("PostImage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Post", postIDParameter, postTitleParameter, postDateParameter, postAuthorParameter, postBodyParameter, postImageParameter);
        }
    }
}
